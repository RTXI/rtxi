AC_INIT([RTXI],[trunk],[rtxi-help@lists.sourceforge.net],rtxi)

AM_CONFIG_HEADER(include/rtxi_config.h)
AM_INIT_AUTOMAKE(foreign)
AM_PATH_CPPUNIT

AC_PROG_LIBTOOL
AC_PROG_CC
AC_PROG_CXX

LIBS=
AC_CHECK_LIB([m],[cos])
AC_CHECK_LIB([gslcblas],[cblas_dgemm])
AC_CHECK_LIB([gsl],[gsl_blas_dgemm])
GSL_LIBS=$LIBS
AC_SUBST(GSL_LIBS)

LIBS=
AC_CHECK_HEADER([hdf5.h])
AC_CHECK_LIB([hdf5],[H5Fopen])
AC_CHECK_LIB([hdf5_hl],[H5PTopen])
HDF_LIBS=$LIBS
AC_SUBST(HDF_LIBS)

AX_HAVE_QT

if test "$have_qt" != "yes" ; then
    AC_MSG_ERROR([Qt not found; see help on how to specify Qt location])
fi

rtos=""

AC_CHECK_RTAI
AC_ARG_ENABLE(xenomai,
  [  --enable-xenomai        build the Xenomai interface],
  [case "${enablecal}" in
    "" | y | ye | yes) rtos=xenomai;;
    n | no);;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-xenomai);;
  esac],
  [])
AC_ARG_ENABLE(posix,
  [  --enable-posix          build the POSIX non-RT interface],
  [case "${enableval}" in
    "" | y | ye | yes) rtos=posix;;
    n | no);;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-posix);;
  esac],
  [])

AM_CONDITIONAL(RTAI3, test x$rtos = xrtai3)
AM_CONDITIONAL([XENOMAI],[test x$rtos = xxenomai])
AM_CONDITIONAL([POSIX],[test x$rtos = xposix])
if test x$rtos = xrtai3; then
  RTOS_CPPFLAGS=$RTAI_CPPFLAGS
  RTOS_LDFLAGS=$RTAI_LDFLAGS
elif test x$rtos = xxenomai; then
  if test -x /usr/xenomai/bin/xeno-config; then
    XENO_CONFIG='/usr/xenomai/bin/xeno-config'
  elif test -x /usr/bin/xeno-config; then
    XENO_CONFIG='/usr/bin/xeno-config'
  else
    XENO_CONFIG=`which xeno-config`
  fi
  RTOS_CPPFLAGS=`$XENO_CONFIG --skin=native --cflags`
  RTOS_LDFLAGS=`$XENO_CONFIG --skin=native --ldflags`
elif test x$rtos = xposix; then
  RTOS_CPPFLAGS='-I/usr/local/include'
  RTOS_LDFLAGS='-I/usr/local/include -L/usr/local/lib -lpthread'
elif test x$rtos = x;then
  AC_MSG_ERROR([no realtime system found])
fi
AC_SUBST(RTOS_CPPFLAGS)
AC_SUBST(RTOS_LDFLAGS)

AC_ARG_ENABLE(debug,
  [  --enable-debug          turn on debugging],
  [case "${enableval}" in
    "" | y | ye | yes) debug=true ;;
    n | no) debug=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
  esac],
  [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

AC_ARG_ENABLE(comedi,
  [  --enable-comedi         build the comedi driver],
  [case "${enableval}" in
    "" | y | ye | yes) comedi=true;;
    n | no) comedi=false;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-comedi);;
  esac],
[comedi=true])

AC_ARG_ENABLE(analogy,
  [  --enable-analogy        build the analogy driver],
  [case "${enableval}" in
    "" | y | ye | yes) analogy=true;;
    n | no) analogy=false;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-analogy);;
  esac],
  [analogy=true])  

if test x$rtos = xrtai3; then
  AM_CONDITIONAL(BUILD_COMEDI, test x$comedi = xtrue)
  AM_CONDITIONAL(BUILD_COMEDILIB,false)
  AM_CONDITIONAL(BUILD_ANALOGY, false)
elif test x$rtos = xposix; then
  AM_CONDITIONAL(BUILD_COMEDI,false)
  AM_CONDITIONAL(BUILD_COMEDILIB, test x$comedi = xtrue)
  AM_CONDITIONAL(BUILD_ANALOGY, false)
elif test x$rtos = xxenomai; then
  AM_CONDITIONAL(BUILD_COMEDI,false)
  AM_CONDITIONAL(BUILD_COMEDILIB,false)
  AM_CONDITIONAL(BUILD_ANALOGY, test x$analogy = xtrue)
else
  AM_CONDITIONAL(BUILD_COMEDI,false)
  AM_CONDITIONAL(BUILD_COMEDILIB,false)
  AM_CONDITIONAL(BUILD_ANALOGY, false)
fi

AC_ARG_ENABLE(ni,
  [  --enable-ni             build the ni driver],
  [case "${enableval}" in
    "" | y | ye | yes) ni=true;;
    n | no) ni=false;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-ni);;
  esac],
  [ni=false])
AM_CONDITIONAL(BUILD_NI, test x$ni = xtrue)

AC_ARG_ENABLE(clampprotocol,
  [  --enable-clampprotocol     build the clamp protocol module (default=enabled)],
  [case "${enableval}" in
    "" | y | ye | yes) clampprotocol=true ;;
    n | no) clampprotocol=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-clampprotocol) ;;
  esac],
  [clampprotocol=true])
AM_CONDITIONAL(BUILD_CLAMPPROTOCOL, test x$clampprotocol = xtrue)

dnl Clear build variables

INCLUDES=
DEFS=
CPPFLAGS=
CXXFLAGS=
CFLAGS=
LDADD=
LDFLAGS=
LIBS=

dnl Create makefiles and other configuration files
AC_CONFIG_FILES([
Makefile
hdf/Makefile
rtxi/Makefile
scripts/Makefile
scripts/init_rtxi
scripts/rtxi_comedi
scripts/rtxi_plugin_config
testsuite/Makefile
plugins/Makefile
plugins/amplifier_control/am_2400_commander/Makefile
plugins/amplifier_control/axon_axopatch1d_commander/Makefile
plugins/amplifier_control/axon_axopatch200_commander/Makefile
plugins/amplifier_control/axon_multiclamp700_commander/Makefile
plugins/analogy_device/Makefile
plugins/clamp_protocol/Makefile
plugins/comedi_device/Makefile
plugins/comedilib_device/Makefile
plugins/connector/Makefile
plugins/data_recorder/Makefile
plugins/dynamo_model_loader/Makefile
plugins/FIRwindow/Makefile
plugins/IIRfilter/Makefile
plugins/membrane_test/Makefile
plugins/mimic/Makefile
plugins/model_loader/Makefile
plugins/neuron/Makefile
plugins/noisegen/Makefile
plugins/ni_device/Makefile
plugins/oscilloscope/Makefile
plugins/performance_measurement/Makefile
plugins/siggen/Makefile
plugins/synch/Makefile
plugins/system_control/Makefile
plugins/userprefs/Makefile
plugins/wave_maker/Makefile
])

dnl Generate config.status and launch it
AC_OUTPUT
